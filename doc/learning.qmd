---
title: "Reproducible documents"
author: "Fie Langmann"
format: html
editor: visual
---

To get code chunk: ctrl+alt+i

Create a new code chunk and then type setup right after the r. This section can be used to load packages and data

```{r setup}
#| message:false
#| warning:false
library(tidyverse)
library(NHANES)
nhanes_small <- read_csv(here::here("data/nhanes_small.csv"))
```

"#\| include:false" will only run the code but not print anything in your document --\>

Options added in the code chunk only works for that specific code chunk and not for the others. If you want to add options for the whole document, they should be added in the YAML header instead as: title: "Reproducible documents" author: "Your Name" format: html execute: echo: false warning: false message: false

```{r}
nhanes_small
```

## Table of results

```{r mean-age-bmi-table}
# always insert an empty line after header before making new code chunk
nhanes_small %>%
  filter(!is.na(diabetes), !is.na(education)) %>%
  group_by(diabetes, education) %>%
  summarise(
    mean_age = mean(age, na.rm = TRUE),
    mean_bmi = mean(bmi, na.rm = TRUE)
  ) %>%
  ungroup() %>% # good practice to remember to ungroup things
  knitr::kable(caption = "Mean values of Age and BMI for education and diabetes status")
```

# Exercise 8.6

1.  In the doc/learning.qmd file, create a new header called \## Prettier table along with a code chunk and label it prettier-table. Copy the code below (that we wrote above) and paste the code into the new chunk. Add the option #\| echo: false to the code chunk.

## Prettier table

```{r prettier-table}
#| echo:false
nhanes_small %>%
  filter(!is.na(diabetes), !is.na(education)) %>%
  group_by(diabetes, education) %>%
  summarise(
    mean_age = mean(age, na.rm = TRUE),
    mean_bmi = mean(bmi, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    # Task 2a. round() to 1 digit
    mean_age = round(mean_age, 1),
    mean_bmi = round(mean_bmi, 1),
    # Task 2b. str_to_sentence() to capitalize the first letter of the words in education column.
    education = str_to_sentence(education)
  ) %>%
  rename(
    # Task 3.
    "Diabetes status" = diabetes,
    Education = education,
    "Mean Age" = mean_age,
    "Mean BMI" = mean_bmi
  ) %>%
  knitr::kable(caption = "Rounded mean values of Age and BMI for each education and diabetes status.")
```

Hint: You can rename columns to include spaces by using " around the new column name (e.g. "Diabetes Status" = diabetes). Don't forget, the renaming form is new = old.

5.  Run styler on the document (Ctrl-Shift-P, then type "style file").

6.  Render the document to HTML (Ctrl-Shift-K for "Knit" or Ctrl-Shift-P, then type "render") and see what the table looks like.

7.  End the exercise by adding, committing, and pushing the files to your GitHub repository (Ctrl-Shift-P, then type "commit").

### Adding a picture

Fresh apple in @fig-apple-mirror!

![Apple in mirror by [VĂN HỒNG PHÚC BÙI](https://pixabay.com/da/users/martinophuc-13713779/) on Pixabay](images/apple.jpg){#fig-apple-mirror width="50%" height="50%"}

the image path will need to be in the same folder as the qmd file. Otherwise the document will not render.

## Visualizing data

### Plotting one variable

```{r}
# Create histogram for BMI
ggplot(nhanes_small, aes(x = bmi)) +
  geom_histogram()
```

You'll notice we get a warning about dropping missing values. That's ggplot2 letting us know we have some missing values. So, like with median() and many of the other summary statistic functions, we can set na.rm = TRUE to geom_histogram() and other geom_* functions.

```{r}
# Create histogram for BMI without missing values
ggplot(nhanes_small, aes(x = bmi)) +
  geom_histogram(na.rm = TRUE)
```

We can use dplyr functions to remove anything above BMI=60. Because we are piping the results into ggplot(), we can use aes() right away rather than put in the data object to the first argument position.

```{r}
nhanes_small %>%
  filter(bmi <= 60) %>%
  ggplot(aes(x = bmi)) +
  geom_histogram(na.rm = TRUE)
```

We can add captions and figure labels, so we can reference the figure in the text. Caption can be added with the option #| fig-cap. Figure label with #| label so we can reference it in the text by using "@fig-LABEL". Figure labels must always start with fig-.

BMI distribution in NHANES data set was visualized in @fig-bmi-histo

```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-histo
nhanes_small %>%
  filter(bmi <= 60) %>%
  ggplot(aes(x = bmi)) +
  geom_histogram(na.rm = TRUE)
```

Geom_ are suitable for plotting continuous variables. When plotting discrete (categorical) variables sadly, there’s really only one: geom_bar(). This isn’t a geom for a barplot though; instead, it shows the counts of a discrete variable. There are many discrete variables in NHANES, including education and diabetes, so let’s use this geom to visualize those. 

```{r}
# Create count barplot for education
ggplot(nhanes_small, aes(x = education)) +
  geom_bar()
```

We can’t use na.rm = TRUE here because geom_bar() includes the NA information as a bar. But we can filter NA's out of the data
```{r}
nhanes_small %>%
  filter(!is.na(education)) %>%
  ggplot(aes(x = education)) +
  geom_bar()
```


We can do the same two steps for diabetes status
```{r}
# Create count barplot for diabetes status
ggplot(nhanes_small, aes(x = diabetes)) +
  geom_bar()
```


```{r}
# Count barplot for diabetes status without NA's
nhanes_small %>%
  filter(!is.na(diabetes)) %>%
  ggplot(aes(x = diabetes)) +
  geom_bar()
```

With Quarto, we can arrange them side by side in the output document by using the #| layout-ncol (or #| layout-nrow or #| layout). We can then combine it with captions and sub-captions using #| fig-subcap to have a nice output
```{r}
#| label: fig-diabetes-education
#| fig-cap: "Counts of Diabetes and Education."
#| fig-subcap:
#|   - "Number of those with or without Diabetes."
#|   - "Number of those with different educational status."
#| layout-ncol: 2
nhanes_small %>%
  filter(!is.na(diabetes)) %>%
  ggplot(aes(x = diabetes)) +
  geom_bar()

nhanes_small %>%
  filter(!is.na(education)) %>%
  ggplot(aes(x = education)) +
  geom_bar()
```

**Code explanation**
fig-subcap should be provided in the order, that the plots are created in the code chunk. Subcap or cap with more than one word (like example above) should be stated with "  ".
layout-ncol: 2 will provide plots side by side

*Brief on barplots*
Barplots should only be used for discrete (categorical) data where you want to show counts or proportions.

Run styler: ctrl+shift+p

Type: style active file


### Plotting two variables

When you have two continuous variables, some geoms to use are:

- geom_hex(), which is used to replace geom_point() when your data are massive and creating points for each value takes too long to plot. Because we have a lot of data, we will show this one.
- geom_point(), which is used to create a standard scatterplot. You’ll use this one in the exercise, it is used the same way as other geoms.
- geom_smooth(), which applies a “regression-type” line to the data (default uses LOESS regression).

```{r}
#| label: fig-bmi-bp-twoplots
#| fig-cap: "Association between BMI and systolic blood pressure presented with geom_hex and geom_point "
#| fig-subcap:
#|   - "Presented with geom_hex."
#|   - "Presented with geom_point."
#| layout-ncol: 2
ggplot(nhanes_small, aes(x = bmi, y = bp_sys_ave)) +
  geom_hex(na.rm = TRUE)

ggplot(nhanes_small, aes(x = bmi, y = bp_sys_ave)) +
  geom_point(na.rm = TRUE)
```

We can also add a regression-like line to get information on the association

```{r}
#| label: fig-bmi-bp-twoplots-smooth
#| fig-cap: "Association between BMI and systolic blood pressure presented with geom_hex and geom_point with smoothing line"
#| fig-subcap:
#|   - "Presented with geom_hex."
#|   - "Presented with geom_point."
#| layout-ncol: 2
# Add a smoothing line with confidence intervals
ggplot(nhanes_small, aes(x = bmi, y = bp_sys_ave)) +
  geom_hex(na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)

ggplot(nhanes_small, aes(x = bmi, y = bp_sys_ave)) +
  geom_point(na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)
```

**Plotting two categorical variables**
```{r}
# Diabetes and education
# Note that we can pipe data into ggplot
nhanes_small %>%
  filter(!is.na(education), !is.na(diabetes)) %>%
  ggplot(aes(x = diabetes, fill = education)) +
  geom_bar()
```

*Code explanation*

In the ggplot we can define fill as an option to use colors to visualize the distribution of another variable (education in example above) in the bars of the first defined variable (x=)

The fill option can also be plotted side by side:
```{r}
# "dodged" (side-by-side) bar plot
nhanes_small %>%
  filter(!is.na(education), !is.na(diabetes)) %>%
  ggplot(aes(x = diabetes, fill = education)) +
  geom_bar(position = position_dodge())
```

*Code explanation*

position is an option to tell how the bars are presented in the plot; position_dodge indicates that we're plotting the bars dodged, meaning side-by-side, instead of stacking


### Plotting mixed variable types; continuous and categorical
```{r}
# geom_jitter() makes a type of scatterplot, but for discrete and continuous variables
nhanes_small %>%
  filter(!is.na(education)) %>%
  ggplot(aes(x = education, y = bmi)) +
  geom_jitter()
```


```{r}
# geom_violin() shows a density distribution
nhanes_small %>%
  filter(!is.na(diabetes), bmi <= 60) %>%
  ggplot(aes(x = diabetes, y = bmi)) +
  geom_violin(na.rm = TRUE)
```

*Code explanation*
geom_violin is great when there is a lot of data and geom_jitter() may otherwise appear as a mass of dots.

Style document 

